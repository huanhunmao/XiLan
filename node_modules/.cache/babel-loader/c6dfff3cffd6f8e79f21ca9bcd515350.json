{"ast":null,"code":"var _jsxFileName = \"/Users/fhj/Desktop/github-pr/ms-/xilan/src/components/Button/button.tsx\";\nimport React from 'react';\nimport classNames from 'classnames'; // 枚举出 ButtonSize ButtonType \n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport let ButtonSize;\n\n(function (ButtonSize) {\n  ButtonSize[\"Large\"] = \"lg\";\n  ButtonSize[\"Small\"] = \"sm\";\n})(ButtonSize || (ButtonSize = {}));\n\nexport let ButtonType; // 新建interface BaseButtonProps属性\n\n(function (ButtonType) {\n  ButtonType[\"Primary\"] = \"primary\";\n  ButtonType[\"Default\"] = \"default\";\n  ButtonType[\"Danger\"] = \"danger\";\n  ButtonType[\"Link\"] = \"link\";\n})(ButtonType || (ButtonType = {}));\n\n// 主函数\nconst Button = props => {\n  //取出props 属性\n  const {\n    disabled,\n    size,\n    btnType,\n    children,\n    href\n  } = props; // 动态添加 className btn(默认 ) btn-lg  btn-primary\n\n  const classes = classNames('btn', {\n    [`btn-${btnType}`]: btnType,\n    [`btn-${size}`]: size,\n    'disabled': btnType === ButtonType.Link && disabled\n  }); // 添加 主体部分  链接 a类型\n\n  if (btnType === ButtonType.Link && href) {\n    return /*#__PURE__*/_jsxDEV(\"a\", {\n      className: classes,\n      href: href,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this); // button类型\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      className: classes,\n      disabled: disabled,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this);\n  }\n}; // 添加 默认值\n\n\n_c = Button;\nButton.defaultProps = {\n  disabled: false,\n  btnType: ButtonType.Default\n}; //导出 \n\nexport default Button;\n\nvar _c;\n\n$RefreshReg$(_c, \"Button\");","map":{"version":3,"sources":["/Users/fhj/Desktop/github-pr/ms-/xilan/src/components/Button/button.tsx"],"names":["React","classNames","ButtonSize","ButtonType","Button","props","disabled","size","btnType","children","href","classes","Link","defaultProps","Default"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,YAAvB,C,CACA;;;AACA,WAAYC,UAAZ;;WAAYA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;GAAAA,U,KAAAA,U;;AAIZ,WAAYC,UAAZ,C,CAQA;;WARYA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;GAAAA,U,KAAAA,U;;AAkBZ;AACA,MAAMC,MAAkC,GAAIC,KAAD,IAAW;AAClD;AACA,QAAM;AAACC,IAAAA,QAAD;AAAUC,IAAAA,IAAV;AAAeC,IAAAA,OAAf;AAAuBC,IAAAA,QAAvB;AAAgCC,IAAAA;AAAhC,MAAwCL,KAA9C,CAFkD,CAGlD;;AACA,QAAMM,OAAO,GAAGV,UAAU,CAAC,KAAD,EAAO;AACjC,KAAE,OAAMO,OAAQ,EAAhB,GAAqBA,OADY;AAEjC,KAAE,OAAMD,IAAK,EAAb,GAAkBA,IAFe;AAGjC,gBAAcC,OAAO,KAAKL,UAAU,CAACS,IAAxB,IAAiCN;AAHb,GAAP,CAA1B,CAJkD,CASlD;;AACA,MAAGE,OAAO,KAAKL,UAAU,CAACS,IAAvB,IAA+BF,IAAlC,EAAuC;AACnC,wBACI;AAAG,MAAA,SAAS,EAAGC,OAAf;AAAwB,MAAA,IAAI,EAAGD,IAA/B;AAAA,gBACKD;AADL;AAAA;AAAA;AAAA;AAAA,YADJ,CADmC,CAMnC;AACH,GAPD,MAOK;AACD,wBACI;AAAQ,MAAA,SAAS,EAAGE,OAApB;AAA6B,MAAA,QAAQ,EAAIL,QAAzC;AAAA,gBACKG;AADL;AAAA;AAAA;AAAA;AAAA,YADJ;AAKH;AACJ,CAxBD,C,CA0BA;;;KA1BML,M;AA2BNA,MAAM,CAACS,YAAP,GAAsB;AAClBP,EAAAA,QAAQ,EAAG,KADO;AAElBE,EAAAA,OAAO,EAAGL,UAAU,CAACW;AAFH,CAAtB,C,CAKA;;AACA,eAAeV,MAAf","sourcesContent":["import React from 'react'\nimport classNames from 'classnames'\n// 枚举出 ButtonSize ButtonType \nexport enum ButtonSize {\n    Large = 'lg',\n    Small = 'sm'\n}\nexport enum ButtonType {\n    Primary = 'primary',\n    Default = 'default',\n    Danger = 'danger',\n    Link = 'link'\n    \n}\n\n// 新建interface BaseButtonProps属性\ninterface BaseButtonProps {\n    className ?: string;\n    disabled ?: boolean;\n    size ?: ButtonSize;\n    btnType ?: ButtonType;\n    children : React.ReactNode ;\n    href ?: string;\n}\n\n// 主函数\nconst Button : React.FC<BaseButtonProps> = (props) => {\n    //取出props 属性\n    const {disabled,size,btnType,children,href} = props\n    // 动态添加 className btn(默认 ) btn-lg  btn-primary\n    const classes = classNames('btn',{\n    [`btn-${btnType}`] : btnType,\n    [`btn-${size}`] : size,\n    'disabled' : (btnType === ButtonType.Link) && disabled\n    })\n    // 添加 主体部分  链接 a类型\n    if(btnType === ButtonType.Link && href){\n        return (\n            <a className ={classes} href ={href}>\n                {children}\n            </a>\n        )\n        // button类型\n    }else{\n        return (\n            <button className ={classes} disabled = {disabled}>\n                {children}\n            </button>\n        )\n    }\n}\n\n// 添加 默认值\nButton.defaultProps = {\n    disabled : false,\n    btnType : ButtonType.Default\n}\n\n//导出 \nexport default Button "]},"metadata":{},"sourceType":"module"}
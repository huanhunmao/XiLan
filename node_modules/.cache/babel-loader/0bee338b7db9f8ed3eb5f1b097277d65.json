{"ast":null,"code":"var _jsxFileName = \"/Users/fhj/Desktop/github-pr/ms-/xilan/src/components/Button/button.tsx\";\nimport React from 'react';\nimport classNames from 'classnames';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport let ButtonSize;\n\n(function (ButtonSize) {\n  ButtonSize[\"Large\"] = \"lg\";\n  ButtonSize[\"Small\"] = \"sm\";\n})(ButtonSize || (ButtonSize = {}));\n\nexport let ButtonType;\n\n(function (ButtonType) {\n  ButtonType[\"Default\"] = \"default\";\n  ButtonType[\"Primary\"] = \"primary\";\n  ButtonType[\"Danger\"] = \"danger\";\n  ButtonType[\"Link\"] = \"link\";\n})(ButtonType || (ButtonType = {}));\n\nconst Button = props => {\n  const {\n    btnSize,\n    btnType,\n    children,\n    href,\n    disabled,\n    className,\n    ...restProps\n  } = props;\n  const classes = classNames('btn', className, {\n    [`btn-${btnType}`]: btnType,\n    [`btn-${btnSize}`]: btnSize,\n    disabled: btnType === ButtonType.Link && disabled\n  });\n\n  if (btnType === ButtonType.Link && href) {\n    return /*#__PURE__*/_jsxDEV(\"a\", {\n      className: classes,\n      href: href //    {...restProps}\n      ,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      className: classes,\n      disabled: disabled // {...restProps}\n      ,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this);\n  }\n};\n\n_c = Button;\nButton.defaultProps = {\n  disabled: false,\n  btnType: ButtonType.Default\n};\nexport default Button;\n\nvar _c;\n\n$RefreshReg$(_c, \"Button\");","map":{"version":3,"sources":["/Users/fhj/Desktop/github-pr/ms-/xilan/src/components/Button/button.tsx"],"names":["React","classNames","ButtonSize","ButtonType","Button","props","btnSize","btnType","children","href","disabled","className","restProps","classes","Link","defaultProps","Default"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,YAAvB;;AAEA,WAAYC,UAAZ;;WAAYA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;GAAAA,U,KAAAA,U;;AAKZ,WAAYC,UAAZ;;WAAYA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;GAAAA,U,KAAAA,U;;AAsBZ,MAAMC,MAA8B,GAAIC,KAAD,IAAW;AAC9C,QAAM;AAACC,IAAAA,OAAD;AACDC,IAAAA,OADC;AAEDC,IAAAA,QAFC;AAGDC,IAAAA,IAHC;AAIDC,IAAAA,QAJC;AAKDC,IAAAA,SALC;AAMD,OAAGC;AANF,MAOEP,KAPR;AAQA,QAAMQ,OAAO,GAAGZ,UAAU,CAAC,KAAD,EAAOU,SAAP,EAAiB;AACvC,KAAE,OAAMJ,OAAQ,EAAhB,GAAqBA,OADkB;AAEvC,KAAE,OAAMD,OAAQ,EAAhB,GAAqBA,OAFkB;AAGvCI,IAAAA,QAAQ,EAAIH,OAAO,KAAKJ,UAAU,CAACW,IAAxB,IAAiCJ;AAHL,GAAjB,CAA1B;;AAKA,MAAGH,OAAO,KAAKJ,UAAU,CAACW,IAAvB,IAA+BL,IAAlC,EAAuC;AACnC,wBACI;AAAG,MAAA,SAAS,EAAEI,OAAd;AACA,MAAA,IAAI,EAAEJ,IADN,CAEJ;AAFI;AAAA,gBAIKD;AAJL;AAAA;AAAA;AAAA;AAAA,YADJ;AAQH,GATD,MASK;AACD,wBACI;AAAQ,MAAA,SAAS,EAAEK,OAAnB;AACA,MAAA,QAAQ,EAAEH,QADV,CAED;AAFC;AAAA,gBAIKF;AAJL;AAAA;AAAA;AAAA;AAAA,YADJ;AAQH;AACJ,CAjCD;;KAAMJ,M;AAmCNA,MAAM,CAACW,YAAP,GAAoB;AAChBL,EAAAA,QAAQ,EAAC,KADO;AAEhBH,EAAAA,OAAO,EAACJ,UAAU,CAACa;AAFH,CAApB;AAKA,eAAeZ,MAAf","sourcesContent":["import React from 'react'\nimport classNames from 'classnames'\n\nexport enum ButtonSize {\n    Large = 'lg',\n    Small = 'sm'\n}\n\nexport enum ButtonType {\n    Default = 'default',\n    Primary = 'primary',\n    Danger = 'danger',\n    Link = 'link'\n}\n\ninterface BaseButtonProps {\n    className ?: string,\n    btnSize ?:  ButtonSize,\n    btnType ?: ButtonType,\n    children : React.ReactNode,\n    disabled ?: boolean,\n    href ?: string,\n   \n}\n// 拿到button 所有属性\ntype NativeButtonProps = BaseButtonProps & React.ButtonHTMLAttributes<HTMLLIElement>\n//拿到上面的BaseButtonProps 所有属性 \ntype AnchorButtonProps = BaseButtonProps & React.AnchorHTMLAttributes<HTMLLIElement>\n// 两个合在一起并导出 \nexport type ButtonProps = Partial<NativeButtonProps & AnchorButtonProps>\nconst Button : React.FC<ButtonProps> = (props) => {\n    const {btnSize,\n         btnType,\n         children,\n         href,\n         disabled,\n         className,\n         ...restProps\n        } = props\n    const classes = classNames('btn',className,{\n        [`btn-${btnType}`] : btnType,\n        [`btn-${btnSize}`] : btnSize,\n        disabled : (btnType === ButtonType.Link) && disabled\n    })\n    if(btnType === ButtonType.Link && href){\n        return(\n            <a className={classes}  \n            href={href}\n        //    {...restProps}\n            >\n                {children}\n            </a>\n        )\n    }else{\n        return (\n            <button className={classes} \n            disabled={disabled}  \n           // {...restProps}\n            >\n                {children}\n            </button>\n        )\n    }\n}\n\nButton.defaultProps={\n    disabled:false,\n    btnType:ButtonType.Default\n}\n\nexport default Button"]},"metadata":{},"sourceType":"module"}